
"Sphere should inherit from Hittable abstract class and define it's hit method"

#include "Hittable.h"
#include "Vec3.h"

class Sphere : public Hittable {
public:
    Sphere() {}
    Sphere(Vec3 center, double radius) : center(center), radius(radius) {}

    virtual bool hit(const Ray& r, double t_min, double t_max, HitRecord& rec) const override {
        Vec3 oc = r.origin() - center;
        double a = r.direction().length_squared();
        double half_b = dot(oc, r.direction());
        double c = oc.length_squared() - radius * radius;
        double discriminant = half_b * half_b - a * c;

        if (discriminant > 0) {
            double root = sqrt(discriminant);
            double temp = (-half_b - root) / a;
            if (temp < t_max && temp > t_min) {
                rec.t = temp;
                rec.p = r.at(rec.t);
                Vec3 outward_normal = (rec.p - center) / radius;
                rec.set_face_normal(r, outward_normal);
                return true;
            }
            temp = (-half_b + root) / a;
            if (temp < t_max && temp > t_min) {
                rec.t = temp;
                rec.p = r.at(rec.t);
                Vec3 outward_normal = (rec.p - center) / radius;
                rec.set_face_normal(r, outward_normal);
                return true;
            }
        }
        return false;
    }

public:
    Vec3 center;
    double radius;
};

Rework needed as this is not consistent with the codebase








// Write a function to set normal face
inline void set_face_normal(Ray r, GeoVec outward_normal) {
    front_face = r.direction.dot(outward_normal) < 0;
    normal = front_face ? outward_normal : -outward_normal;
}

// Functiont to negate a vector
inline GeoVec operator-(const GeoVec& v)
{
	return GeoVec(-v.x, -v.y, -v.z);
}